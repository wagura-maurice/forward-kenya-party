<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Str;
use App\Models\InvoiceType;

class InvoiceTypesTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        // Delete all existing records in the invoice_types table
        \DB::table('invoice_types')->delete();

        // Define e-government invoice types
        $types = [
            [
                'name' => 'Standard Invoice',
                'slug' => Str::slug('Standard Invoice'),
                'description' => 'A standard invoice for goods or services provided.',
                'configuration' => json_encode(['allow_itemized_billing' => true, 'allow_tax_calculation' => true]),
            ],
            [
                'name' => 'Recurring Invoice',
                'slug' => Str::slug('Recurring Invoice'),
                'description' => 'An invoice issued at regular intervals for ongoing services or subscriptions.',
                'configuration' => json_encode(['allow_auto_generation' => true, 'allow_recurring_payments' => true]),
            ],
            [
                'name' => 'Proforma Invoice',
                'slug' => Str::slug('Proforma Invoice'),
                'description' => 'A preliminary invoice provided before the delivery of goods or services.',
                'configuration' => json_encode(['allow_preliminary_billing' => true, 'allow_approval_workflow' => true]),
            ],
            [
                'name' => 'Credit Invoice',
                'slug' => Str::slug('Credit Invoice'),
                'description' => 'An invoice issued to provide a credit or refund to a customer.',
                'configuration' => json_encode(['allow_credit_issuance' => true, 'allow_refund_processing' => true]),
            ],
            [
                'name' => 'Debit Invoice',
                'slug' => Str::slug('Debit Invoice'),
                'description' => 'An invoice issued to request additional payment from a customer.',
                'configuration' => json_encode(['allow_additional_charges' => true, 'allow_payment_requests' => true]),
            ],
            [
                'name' => 'Commercial Invoice',
                'slug' => Str::slug('Commercial Invoice'),
                'description' => 'An invoice used for international trade and customs purposes.',
                'configuration' => json_encode(['allow_customs_declaration' => true, 'allow_currency_conversion' => true]),
            ],
            [
                'name' => 'Tax Invoice',
                'slug' => Str::slug('Tax Invoice'),
                'description' => 'An invoice that includes tax details for compliance with tax regulations.',
                'configuration' => json_encode(['allow_tax_calculation' => true, 'allow_tax_reporting' => true]),
            ],
            [
                'name' => 'Interim Invoice',
                'slug' => Str::slug('Interim Invoice'),
                'description' => 'An invoice issued for partial payments during a project or service delivery.',
                'configuration' => json_encode(['allow_partial_payments' => true, 'allow_progress_tracking' => true]),
            ],
            [
                'name' => 'Final Invoice',
                'slug' => Str::slug('Final Invoice'),
                'description' => 'An invoice issued upon completion of a project or service delivery.',
                'configuration' => json_encode(['allow_final_payment' => true, 'allow_project_closure' => true]),
            ],
            [
                'name' => 'Self-Billing Invoice',
                'slug' => Str::slug('Self-Billing Invoice'),
                'description' => 'An invoice generated by the buyer rather than the seller.',
                'configuration' => json_encode(['allow_buyer_generated_invoices' => true, 'allow_approval_workflow' => true]),
            ],
            [
                'name' => 'Timesheet Invoice',
                'slug' => Str::slug('Timesheet Invoice'),
                'description' => 'An invoice based on hours worked or services rendered over a period of time.',
                'configuration' => json_encode(['allow_hourly_billing' => true, 'allow_timesheet_submission' => true]),
            ],
            [
                'name' => 'Expense Invoice',
                'slug' => Str::slug('Expense Invoice'),
                'description' => 'An invoice for reimbursing expenses incurred by a third party.',
                'configuration' => json_encode(['allow_expense_submission' => true, 'allow_reimbursement_processing' => true]),
            ],
            [
                'name' => 'Consolidated Invoice',
                'slug' => Str::slug('Consolidated Invoice'),
                'description' => 'An invoice that combines multiple transactions or orders into a single invoice.',
                'configuration' => json_encode(['allow_multiple_orders' => true, 'allow_consolidation' => true]),
            ],
            [
                'name' => 'Retainer Invoice',
                'slug' => Str::slug('Retainer Invoice'),
                'description' => 'An invoice for advance payments or retainers for future services.',
                'configuration' => json_encode(['allow_advance_payments' => true, 'allow_service_tracking' => true]),
            ],
            [
                'name' => 'Subscription Invoice',
                'slug' => Str::slug('Subscription Invoice'),
                'description' => 'An invoice for recurring subscription services.',
                'configuration' => json_encode(['allow_recurring_billing' => true, 'allow_auto_renewal' => true]),
            ],
            [
                'name' => 'Project Invoice',
                'slug' => Str::slug('Project Invoice'),
                'description' => 'An invoice for project-based services or deliverables.',
                'configuration' => json_encode(['allow_project_tracking' => true, 'allow_milestone_billing' => true]),
            ],
            [
                'name' => 'Service Invoice',
                'slug' => Str::slug('Service Invoice'),
                'description' => 'An invoice for services rendered by the government to citizens or businesses.',
                'configuration' => json_encode(['allow_service_selection' => true, 'allow_status_tracking' => true]),
            ],
            [
                'name' => 'Utility Invoice',
                'slug' => Str::slug('Utility Invoice'),
                'description' => 'An invoice for utility services such as electricity, water, and gas.',
                'configuration' => json_encode(['allow_recurring_billing' => true, 'allow_bill_upload' => true]),
            ],
            [
                'name' => 'Penalty Invoice',
                'slug' => Str::slug('Penalty Invoice'),
                'description' => 'An invoice for fines or penalties imposed by the government.',
                'configuration' => json_encode(['allow_dispute_submission' => true, 'allow_payment_plans' => true]),
            ],
            [
                'name' => 'Donation Invoice',
                'slug' => Str::slug('Donation Invoice'),
                'description' => 'An invoice for donations received by the government.',
                'configuration' => json_encode(['allow_donation_tracking' => true, 'allow_tax_deduction' => true]),
            ],
        ];

        // Insert the invoice types into the database using Eloquent
        foreach ($types as $key => $type) {
            InvoiceType::create(array_merge($type, ['id' => $key + 1, 'uuid' => (String) Str::uuid(), 'created_at' => now(), 'updated_at' => now()]));
        }
    }
}